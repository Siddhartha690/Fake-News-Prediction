# -*- coding: utf-8 -*-
"""Fake News Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SnFglpZcUOOP2ULfPzOW_V3D8EJbzOYr

About the Dataset:

  1. id: unique id for a news article
  2. title: the title of a news article
  3. author: author of the news article
  4. text: the text of the article; could be incomplete
  5. label: a label that marks the article as potentially unreliable

1: Fake news

0: real news

---

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import re  #useful for searching words in a text or paragraph
from nltk.corpus import stopwords  
from nltk.stem.porter import PorterStemmer  #used to stem words(gives root word)
from sklearn.feature_extraction.text import TfidfVectorizer  #to convert the text into feature vectors
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

# printing the stopwords in english
print(stopwords.words('english'))

"""Data Preprocessing"""

#loading the dataset to pandas dataframe
news_dataset = pd.read_csv('/content/train.csv')

news_dataset.shape

news_dataset.head()

#counting the number of missing values in the dataset
news_dataset.isnull().sum()

#replacing null values with empty string
news_dataset = news_dataset.fillna('')

#merging the author name and news title
news_dataset['content'] = news_dataset['author']+' '+news_dataset['title']

print(news_dataset['content'])

#separating the data and label
x = news_dataset.drop(columns='label', axis=1)
y = news_dataset['label']

print(x)
print(y)

"""Stemming: It is the process of reducing a word to its root word.

example: actor, actress, acting ---> act
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

#separating the data and label
x = news_dataset['content'].values
y = news_dataset['label'].values

print(x)

print(y)

y.shape

# converting the textual data to numerical data
vectorizer = TfidfVectorizer()
vectorizer.fit(x)

x = vectorizer.transform(x)

print(x)

"""Splitting Dataset to Training and Text Data"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2)

"""Training the Model: Logistic Regression"""

model = LogisticRegression()

model.fit(x_train, y_train)

"""Evaluation

Accuracy score
"""

# accuracy score on the training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print('Accuracy on trainig data : ', training_data_accuracy)

# accuracy score on the test data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy on test data : ', test_data_accuracy)

"""Making a Predictive System"""

x_new = x_test[0]

prediction = model.predict(x_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is fake')

print(y_test[0])

